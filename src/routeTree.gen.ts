/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as EditImport } from './routes/edit'
import { Route as CreateImport } from './routes/Create'
import { Route as IndexImport } from './routes/index'
import { Route as EntriesIndexImport } from './routes/entries/index'
import { Route as EntriesEntryIdImport } from './routes/entries/$entryId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const EditRoute = EditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/Create',
  path: '/Create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EntriesIndexRoute = EntriesIndexImport.update({
  id: '/entries/',
  path: '/entries/',
  getParentRoute: () => rootRoute,
} as any)

const EntriesEntryIdRoute = EntriesEntryIdImport.update({
  id: '/entries/$entryId',
  path: '/entries/$entryId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Create': {
      id: '/Create'
      path: '/Create'
      fullPath: '/Create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/edit': {
      id: '/edit'
      path: '/edit'
      fullPath: '/edit'
      preLoaderRoute: typeof EditImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/entries/$entryId': {
      id: '/entries/$entryId'
      path: '/entries/$entryId'
      fullPath: '/entries/$entryId'
      preLoaderRoute: typeof EntriesEntryIdImport
      parentRoute: typeof rootRoute
    }
    '/entries/': {
      id: '/entries/'
      path: '/entries'
      fullPath: '/entries'
      preLoaderRoute: typeof EntriesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Create': typeof CreateRoute
  '/edit': typeof EditRoute
  '/settings': typeof SettingsRoute
  '/entries/$entryId': typeof EntriesEntryIdRoute
  '/entries': typeof EntriesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Create': typeof CreateRoute
  '/edit': typeof EditRoute
  '/settings': typeof SettingsRoute
  '/entries/$entryId': typeof EntriesEntryIdRoute
  '/entries': typeof EntriesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Create': typeof CreateRoute
  '/edit': typeof EditRoute
  '/settings': typeof SettingsRoute
  '/entries/$entryId': typeof EntriesEntryIdRoute
  '/entries/': typeof EntriesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Create'
    | '/edit'
    | '/settings'
    | '/entries/$entryId'
    | '/entries'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Create' | '/edit' | '/settings' | '/entries/$entryId' | '/entries'
  id:
    | '__root__'
    | '/'
    | '/Create'
    | '/edit'
    | '/settings'
    | '/entries/$entryId'
    | '/entries/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  EditRoute: typeof EditRoute
  SettingsRoute: typeof SettingsRoute
  EntriesEntryIdRoute: typeof EntriesEntryIdRoute
  EntriesIndexRoute: typeof EntriesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  EditRoute: EditRoute,
  SettingsRoute: SettingsRoute,
  EntriesEntryIdRoute: EntriesEntryIdRoute,
  EntriesIndexRoute: EntriesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Create",
        "/edit",
        "/settings",
        "/entries/$entryId",
        "/entries/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Create": {
      "filePath": "Create.tsx"
    },
    "/edit": {
      "filePath": "edit.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/entries/$entryId": {
      "filePath": "entries/$entryId.tsx"
    },
    "/entries/": {
      "filePath": "entries/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
