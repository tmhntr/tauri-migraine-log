name: Release

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Test
        run: yarn test

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      release_version: ${{ steps.format-version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/changelog@5
            @semantic-release/exec@5
            @semantic-release/git@9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Format version for Tauri
        if: steps.semantic.outputs.new_release_published == 'true'
        id: format-version
        run: |
          VERSION=${{ steps.semantic.outputs.new_release_version }}
          CLEAN_VERSION=$(echo $VERSION | sed 's/-beta\.[0-9]*//')
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

  publish-tauri:
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "tauri-build-${{ matrix.platform }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Cache Tauri build
        uses: actions/cache@v3
        with:
          path: |
            src-tauri/target/
            **/*.rs.bk
            Cargo.lock
          key: ${{ runner.os }}-tauri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-tauri-

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: v${{ needs.semantic-release.outputs.release_version }}
          releaseName: 'Migrainelog v${{ needs.semantic-release.outputs.release_version }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          args: ${{ matrix.args }}